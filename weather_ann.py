# -*- coding: utf-8 -*-
"""weather_ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FzQFOJTQgDPCkZ_HgL2fG6NuzM6bYdwm
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

# prompt: akses datset weather_classification_data.csv pada google drive di dataset/weather/weather_classification_data.csv

# import pandas as pd
# from google.colab import drive
# drive.mount('/content/drive')

# Assuming the file is at /content/drive/MyDrive/dataset/weather/weather_classification_data.csv
# Adjust the path if your file is located elsewhere in your Google Drive.

try:
  df = pd.read_csv('/content/drive/MyDrive/dataset/weather/weather_classification_data.csv')
  print(df.head()) # Display the first few rows of the dataframe
  print(df.describe())
  print(df.info())
except FileNotFoundError:
  print("Error: File not found. Please check the file path.")
except Exception as e:
  print(f"An error occurred: {e}")

# prompt: hapus kolom Precipitation (%) , Cloud Cover,  Wind Speed ,  Visibility (km),  Location . pada dateset karena tidak digunakan

df = df.drop(['Precipitation (%)', 'Cloud Cover', 'Wind Speed', 'Visibility (km)', 'Location'], axis=1)
print(df.head()) # Display the first few rows of the dataframe
print(df.describe())
print(df.info())

# prompt: ubah data ketegorical menjadi menjadi numerical

from sklearn.preprocessing import LabelEncoder

# Assuming 'Weather' is the categorical column you want to convert
le = LabelEncoder()
df['Weather Type'] = le.fit_transform(df['Weather Type'])
df['Season'] = le.fit_transform(df['Season'])

df['Cloud Cover'] = le.fit_transform(df['Cloud Cover'])
df['Location'] = le.fit_transform(df['Location'])

print(df.head())
print(df.info())

# prompt: Pisahkan Label dan fitur

# Separate features (X) and target variable (y)
X = df.drop('Weather Type', axis=1)  # Features are all columns except 'Weather Type'
y = df['Weather Type']  # Target variable is 'Weather Type'

print(X.head())
print(y.head())

# prompt: split dataset yang dibunakan menjadi 80% untuk training dan 20% untuk testing

from sklearn.model_selection import train_test_split

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # 80% training, 20% testing

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

# prompt: lakukan pelatihan dengan model ANN

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Define the ANN model
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],))) # Input layer with 64 neurons
model.add(Dense(32, activation='relu')) # Hidden layer with 32 neurons
model.add(Dense(len(y_train.unique()), activation='softmax')) # Output layer with softmax activation

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1) # Adjust epochs and batch size as needed


# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss:.4f}")
print(f"Test Accuracy: {accuracy:.4f}")

# Make predictions (optional)
y_pred = model.predict(X_test)
y_pred_classes = tf.argmax(y_pred, axis=1) # Convert probabilities to class labels

print(classification_report(y_test, y_pred_classes))

import numpy as np
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Definisikan kelas yang diinginkan
classes = ['Cloudy', 'Rainy', 'Snowy', 'Sunny']

# Calculate the confusion matrix - This line is missing in the original code
cm = confusion_matrix(y_test, y_pred_classes) # Assuming y_test and y_pred_classes are defined from previous cells

# Plot the confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=classes, yticklabels=classes)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.tight_layout()
plt.show()

import pandas as pd
from google.colab import drive
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense



# Convert the model to TensorFlow Lite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TFLite model to your Google Drive
with open('/content/drive/MyDrive/dataset/weather/weather_Fulldata-classification_model.tflite', 'wb') as f:
  f.write(tflite_model)

print("TFLite model saved to /content/drive/MyDrive/weather_classification_model.tflite")
